{"version":3,"sources":["features/tasks/tasksSlice.js","features/tasks/Form/styled.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","GlobalStyle.js","store.js","index.js","theme.js"],"names":["tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toogleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","forEach","actions","selectTasks","Wrapper","styled","form","theme","breakpoint","mobileMax","Input","input","color","mercury","Button","button","teal","white","Form","inputRef","useRef","useState","newTaskConent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","contetTrimmed","trim","content","nanoid","current","focus","ref","value","autoFocus","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","green","remove","red","TasksList","useSelector","map","onClick","div","Toggle","grey","Buttons","disptach","length","disabled","every","section","Div","Header","h2","Section","title","sectionContent","extraHeaderContent","h1","main","Container","props","children","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.cc35c227.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toogleTaskDone: (state, action) => {\r\n      const index = state.tasks.findIndex((task) => task.id === action.payload);\r\n      state.tasks[index].done = !state.tasks[index].done;\r\n    },\r\n    removeTask: (state, action) => {\r\n      const index = state.tasks.findIndex((task) => task.id === action.payload);\r\n      state.tasks.splice(index, 1);\r\n    },\r\n    setAllDone: (state) => {\r\n      state.tasks.forEach((task) => {\r\n        task.done = true;\r\n      });\r\n    },\r\n  },\r\n});\r\nexport const { addTask, toggleHideDone, toogleTaskDone, removeTask, setAllDone } = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 15px;\r\n  }\r\n`;\r\nexport const Input = styled.input`\r\n  border: 2px solid ${({ theme }) => theme.color.mercury};\r\n  padding: 10px;\r\n`;\r\nexport const Button = styled.button`\r\n  cursor: pointer;\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  color: ${({ theme }) => theme.color.white};\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border: none;\r\n  margin-left: 10px;\r\n  transition: transform 1s;\r\n  &:hover {\r\n    filter: brightness(120%);\r\n    transform: scale(1.1);\r\n  }\r\n  &:active {\r\n    transition: none;\r\n    filter: brightness(150%);\r\n  }\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    margin-left: 0px;\r\n    &:hover {\r\n      transform: none;\r\n    }\r\n  } ;\r\n`;\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { Input, Wrapper, Button } from \"./styled\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n  const inputRef = useRef(null);\r\n  const [newTaskConent, setNewTaskContent] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const contetTrimmed = newTaskConent.trim();\r\n    if (!contetTrimmed) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: contetTrimmed,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\" \");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <Wrapper onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskConent}\r\n        autoFocus\r\n        required\r\n        placeholder=\"Co jest do zrobienia ?\"\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 0px;\r\n`;\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  border-bottom: 2px solid ${({ theme }) => theme.color.mercury};\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n  margin: 15px;\r\n  word-break: break-all;\r\n  flex-basis: 100%;\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n  transition: 1s;\r\n  margin: 0 10px;\r\n  cursor: pointer;\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.green};\r\n    `};\r\n  &:hover {\r\n    filter: brightness(150%);\r\n  }\r\n  &:active {\r\n    filter: brightness(180%);\r\n    transition: none;\r\n  }\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.red};\r\n    `};\r\n  &:hover {\r\n    filter: brightness(150%);\r\n    transition: 1s;\r\n  }\r\n  &:active {\r\n    filter: brightness(200%);\r\n    transition: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled.js\";\r\nimport { selectTasks, toogleTaskDone, removeTask } from \"../tasksSlice.js\";\r\n\r\nconst TasksList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <Button toggleDone onClick={() => dispatch(toogleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>{task.content}</Content>\r\n          <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑{\" \"}\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TasksList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  font-size: 16px;\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-auto-rows: 20px;\r\n    margin-top: 30px;\r\n  }\r\n`;\r\nexport const Toggle = styled.button`\r\n  border: none;\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  color: ${({ theme }) => theme.color.teal};\r\n  cursor: pointer;\r\n  transition: 1s;\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.grey};\r\n    cursor: default;\r\n  }\r\n  &:disabled:hover {\r\n    color: ${({ theme }) => theme.color.grey};\r\n  }\r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n  &:active {\r\n    filter: brightness(140%);\r\n    transition: none;\r\n  }\r\n`;\r\n","import { Wrapper, Toggle } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const disptach = useDispatch();\r\n  return (\r\n    <Wrapper>\r\n      {tasks.length > 0 && (\r\n        <>\r\n          <Toggle onClick={() => disptach(toggleHideDone())}>{hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone</Toggle>\r\n          <Toggle onClick={() => disptach(setAllDone())} disabled={tasks.every(({ done }) => done)}>\r\n            Ukończ wszytskie\r\n          </Toggle>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  background-color: ${({ theme }) => theme.color.white};\r\n`;\r\nexport const Div = styled.div`\r\n  padding: 20px 15px 20px;\r\n`;\r\nexport const Header = styled.h2`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.mercury};\r\n  margin-top: 15px;\r\n  margin-bottom: 0px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n","import { Wrapper, Div, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, sectionContent, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Div>{sectionContent}</Div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.h1`\r\n  text-align: left;\r\n  margin-top: 30px;\r\n  font-weight: 700;\r\n`;\r\n","import { Content } from \"./styled\";\r\n\r\nconst Header = ({ title }) => <Content>{title}</Content>;\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.main`\r\n  max-width: 815px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n`;\r\n","import { Content } from \"./styled.js\";\r\n\r\nconst Container = (props) => <Content>{props.children}</Content>;\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Section\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nfunction Tasks() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section title=\"Dodaj nowe zadanie\" sectionContent={<Form />} />\r\n      <Section title=\"Lista zadań\" sectionContent={<TasksList />} extraHeaderContent={<Buttons />} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nexport const App =()=> <Tasks/>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n::after,\r\n::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: ${({ theme }) => theme.color.mercury};\r\n  font-family: \"Montserrat\", sans-serif;\r\n}\r\n`;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\nreducer: {\r\ntasks: tasksReducer,\r\n},\r\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport store from \"./store\"\nimport {Provider} from \"react-redux\"\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n   <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  color: {\r\n    white: \"#ffffff\",\r\n    grey: \"#808080\",\r\n    teal: \"#008080\",\r\n    mercury: \"#e6e6e6\",\r\n    green: \"#008000\",\r\n    red: \"#FF3333\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n};\r\n"],"sourceRoot":""}