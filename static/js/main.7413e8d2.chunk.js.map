{"version":3,"sources":["features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/navigation/styled.js","features/tasks/TasksPage/Search/searchQueryParamName.js","routes.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/Button/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/Search/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","features/author/AuthorPage.js","features/navigation/index.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","newTask","payload","push","toggleHideDone","state","toogleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","task","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectAreTaskEmpty","length","selectIsEveryTaskDone","every","selectLoading","Wrapper","styled","form","theme","breakpoint","mobileMax","Button","button","color","teal","white","Input","input","mercury","Form","inputRef","useRef","useState","newTaskConent","setNewTaskContent","dispatch","useDispatch","onSubmit","event","preventDefault","contetTrimmed","trim","content","nanoid","current","focus","ref","value","autoFocus","required","placeholder","onChange","target","List","ul","Item","li","hidden","css","Content","span","toggleDone","green","remove","red","StyledLink","Link","grey","StyledNavLink","NavLink","attrs","activeClassName","weight","medium","Ul","Li","searchQueryParamName","toAuthor","toTask","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","div","Toggle","Buttons","areTaskEmpty","isEveryTaskDone","disptach","disabled","section","Div","props","author","Header","h2","Section","title","sectionContent","extraHeaderContent","h1","main","Container","children","Search","key","useQueryParameter","repalceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useRepalceQueryParameter","TasksPage","TaskPage","useParams","find","getTaskById","AuthorPage","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","getExampleTasks","a","fetch","respone","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7413e8d2.chunk.js","sourcesContent":["const localStorageKey = \"tasks\";\r\nexport const saveTasksInLocalStorage = (tasks) => localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    hideDone: false,\r\n    loading: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: newTask }) => {\r\n      tasks.push(newTask);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toogleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      tasks.forEach((task) => {\r\n        task.done = true;\r\n      });\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n    fetchExampleTasksError: (state) => {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toogleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectAreTaskEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = (state) => selectTasks(state).every(({ done }) => done);\r\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n  return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\nexport const selectLoading = (state) => selectTasksState(state).loading;\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n    grid-gap: 15px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  cursor: pointer;\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  color: ${({ theme }) => theme.color.white};\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  border: none;\r\n  margin-left: 10px;\r\n  transition: transform 1s;\r\n  &:hover {\r\n    filter: brightness(120%);\r\n    transform: scale(1.1);\r\n  }\r\n  &:active {\r\n    transition: none;\r\n    filter: brightness(150%);\r\n  }\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    margin-left: 0px;\r\n    &:hover {\r\n      transform: none;\r\n    }\r\n  } ;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst Input = styled.input`\r\n  border: 2px solid ${({ theme }) => theme.color.mercury};\r\n  padding: 10px;\r\n`;\r\nexport default Input;\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\nimport Input from \"../../Input\";\r\n\r\nconst Form = () => {\r\n  const inputRef = useRef(null);\r\n  const [newTaskConent, setNewTaskContent] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const contetTrimmed = newTaskConent.trim();\r\n    if (!contetTrimmed) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: contetTrimmed,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\" \");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <Wrapper onSubmit={onFormSubmit}>\r\n      <Input\r\n        ref={inputRef}\r\n        value={newTaskConent}\r\n        autoFocus\r\n        required\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  padding: 0px;\r\n`;\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  align-items: center;\r\n  border-bottom: 2px solid ${({ theme }) => theme.color.mercury};\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\nexport const Content = styled.span`\r\n  margin: 15px;\r\n  word-break: break-word;\r\n  flex-basis: 100%;\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\nexport const Button = styled.button`\r\n  height: 30px;\r\n  width: 30px;\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n  transition: 1s;\r\n  margin: 0 10px;\r\n  cursor: pointer;\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.green};\r\n    `};\r\n  &:hover {\r\n    filter: brightness(150%);\r\n  }\r\n  &:active {\r\n    filter: brightness(180%);\r\n    transition: none;\r\n  }\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.color.red};\r\n    `};\r\n  &:hover {\r\n    filter: brightness(150%);\r\n    transition: 1s;\r\n  }\r\n  &:active {\r\n    filter: brightness(200%);\r\n    transition: none;\r\n  }\r\n`;\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.teal};\r\n\r\n  &:disabled:hover {\r\n    color: ${({ theme }) => theme.color.grey};\r\n  }\r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n  &:active {\r\n    filter: brightness(140%);\r\n    transition: none;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  text-decoration: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n  &.active {\r\n    font-weight: ${({ theme }) => theme.weight.medium};\r\n  }\r\n\r\n  &:hover {\r\n    transition: 1s;\r\n    color: ${({ theme }) => theme.color.red};\r\n    border-bottom: 1px solid;\r\n    filter: brightness(120%);\r\n  }\r\n`;\r\n\r\nexport const Ul = styled.ul`\r\n  background-color: ${({ theme }) => theme.color.teal};\r\n  margin: 0;\r\n  padding: 0;\r\n  display: grid;\r\n  justify-content: center;\r\n  grid-template-columns: auto auto;\r\n`;\r\nexport const Li = styled.li`\r\n  list-style: none;\r\n  margin: 20px;\r\n`;\r\n","const searchQueryParamName = \"szukaj\";\r\nexport default searchQueryParamName;\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\n","import React from \"react\";\r\nimport { toogleTaskDone, removeTask, selectHideDone, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button, StyledLink } from \"./styled.js\";\r\nimport { useLocation } from \"react-router\";\r\nimport {} from \"../../../navigation/styled\";\r\nimport searchQueryParamName from \"../Search/searchQueryParamName.js\";\r\nimport { toTask } from \"../../../../routes\";\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <Button toggleDone onClick={() => dispatch(toogleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n          </Content>\r\n          <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑{\" \"}\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  font-size: 16px;\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-auto-rows: 20px;\r\n    grid-gap: 20px;\r\n    margin-top: 30px;\r\n  }\r\n`;\r\nexport const Toggle = styled.button`\r\n  border: none;\r\n  margin: 10px;\r\n  background-color: ${({ theme }) => theme.color.white};\r\n  color: ${({ theme }) => theme.color.teal};\r\n  cursor: pointer;\r\n  transition: 1s;\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.grey};\r\n    cursor: default;\r\n  }\r\n  &:disabled:hover {\r\n    color: ${({ theme }) => theme.color.grey};\r\n  }\r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n  &:active {\r\n    filter: brightness(140%);\r\n    transition: none;\r\n  }\r\n`;\r\n","import { Wrapper, Toggle } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectHideDone,\r\n  selectAreTaskEmpty,\r\n  selectIsEveryTaskDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTaskEmpty = useSelector(selectAreTaskEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const disptach = useDispatch();\r\n  return (\r\n    <Wrapper>\r\n      {!areTaskEmpty && (\r\n        <>\r\n          <Toggle onClick={() => disptach(toggleHideDone())}>{hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone</Toggle>\r\n          <Toggle onClick={() => disptach(setAllDone())} disabled={isEveryTaskDone}>\r\n            Ukończ wszytskie\r\n          </Toggle>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Toggle, Wrapper } from \"../Buttons/styled\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\n\r\nexport const Button = () => {\r\n  const disptach = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n  return (\r\n    <Wrapper>\r\n      <Toggle disabled={loading} onClick={() => disptach(fetchExampleTasks())}>\r\n        {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n      </Toggle>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  background-color: ${({ theme }) => theme.color.white};\r\n`;\r\nexport const Div = styled.div`\r\n  padding: 20px 15px 20px;\r\n  ${(props) =>\r\n    props.author &&\r\n    css`\r\n      line-height: 1.5;\r\n    `}\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.mercury};\r\n  margin-top: 15px;\r\n  margin-bottom: 0px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n","import { Wrapper, Div, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, sectionContent, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Div>{sectionContent}</Div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.h1`\r\n  text-align: left;\r\n  margin-top: 30px;\r\n  font-weight: 700;\r\n`;\r\n","import { Content } from \"./styled\";\r\n\r\nconst Header = ({ title }) => <Content>{title}</Content>;\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.main`\r\n  max-width: 815px;\r\n  margin: 0 auto;\r\n  padding: 10px;\r\n`;\r\n","import { Content } from \"./styled.js\";\r\n\r\nconst Container = (props) => <Content>{props.children}</Content>;\r\n\r\nexport default Container;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n","import React from \"react\";\r\nimport Input from \"../../Input\";\r\nimport { Wrapper } from \"./styled\";\r\nimport searchQueryParamName from \"./searchQueryParamName\";\r\nimport { useQueryParameter, useRepalceQueryParameter } from \"./queryParameters\";\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const repalceQueryParameter = useRepalceQueryParameter();\r\n\r\n  const OnInputChange = ({ target }) => {\r\n    repalceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() === \"\" ? undefined : target.value,\r\n    });\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Input placeholder=\"Filtruj zadania\" value={query || \"\"} onChange={OnInputChange} />\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default Search;\r\n","import { useLocation, useHistory } from \"react-router\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n};\r\n\r\nexport const useRepalceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport { Button } from \"./Button\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport Search from \"./Search\";\r\n\r\nfunction TasksPage() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista zadań\" />\r\n      <Section title=\"Dodaj nowe zadanie\" sectionContent={<Form />} extraHeaderContent={<Button />} />\r\n      <Section title=\"Wyszukiwarka\" sectionContent={<Search />} />\r\n      <Section title=\"Lista zadań\" sectionContent={<TaskList />} extraHeaderContent={<Buttons />} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\n\r\nfunction TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania 😥\"}\r\n        sectionContent={\r\n          task && (\r\n            <>\r\n              <strong>Ukończono </strong> {task.done ? \"Tak\" : \"Nie\"}\r\n            </>\r\n          )\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TaskPage;\r\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\nimport { Div } from \"../../common/Section/styled\";\r\n\r\nconst AuthorPage = () => (\r\n  <Container>\r\n    <Header title=\"O autorze\" />\r\n    <Section\r\n      title=\"Dominik Blak\"\r\n      sectionContent={\r\n        <>\r\n          <Div author>\r\n            <p>\r\n              <b>Mam na imię Dominik.</b>\r\n              <br />\r\n              Obecnie mieszkam oraz pracuję w Krakowie. Informatyka to także moje hobby, dlatego postanowiłem połączyć\r\n              przyjemne z pożytecznym i się przebranżowić. Miałem już styczność z<i> Javą </i>\r\n              oraz\r\n              <i> Angularem, </i>\r\n              <strong>\r\n                jednak najbardziej przypdał mi do gustu\r\n                <i> JavaScript</i> i <i> React.</i>\r\n              </strong>\r\n            </p>\r\n          </Div>\r\n        </>\r\n      }\r\n    />\r\n  </Container>\r\n);\r\nexport default AuthorPage;\r\n","import { StyledNavLink, Ul, Li } from \"./styled\";\r\nimport { toAuthor, toTasks } from \"./../../routes\";\r\n\r\nexport const Navigation = () => {\r\n  return (\r\n    <Ul>\r\n      <Li>\r\n        <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n      </Li>\r\n      <Li>\r\n        <StyledNavLink to={toAuthor}>O autorze</StyledNavLink>\r\n      </Li>\r\n    </Ul>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport AuthorPage from \"./features/author/AuthorPage\";\r\nimport { Navigation } from \"./features/navigation\";\r\nimport { toTask, toTasks, toAuthor } from \"./routes\";\r\n\r\nexport const App = () => (\r\n  <HashRouter>\r\n    <nav>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <TaskPage />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path={toAuthor()}>\r\n          <AuthorPage />\r\n        </Route>\r\n        <Route>\r\n          <Redirect to={toTasks()} />\r\n        </Route>\r\n      </Switch>\r\n    </nav>\r\n  </HashRouter>\r\n);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\nexport const GlobalStyle = createGlobalStyle`\r\nhtml {\r\n  box-sizing: border-box;\r\n}\r\n\r\n*,\r\n::after,\r\n::before {\r\n  box-sizing: inherit;\r\n}\r\n\r\nbody {\r\n  background-color: ${({ theme }) => theme.color.mercury};\r\n  font-family: \"Montserrat\", sans-serif;\r\n}\r\n`;\r\n","export const getExampleTasks = async () => {\r\n  const respone = await fetch(\"/Todo-list-React/exampleTasks.json\");\r\n  if (!respone.ok) {\r\n    new Error(respone.statusText);\r\n  }\r\n  return await respone.json();\r\n};\r\n","import { takeEvery, takeLatest, call, put, select, delay } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, fetchExampleTasksSuccess, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(fetchExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield call(alert, \"Coś poszło nie tak\");\r\n  }\r\n}\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([tasksSaga()]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\nsagaMiddleware.run(rootSaga);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {App} from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport store from \"./store\"\nimport {Provider} from \"react-redux\"\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n   <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  color: {\r\n    white: \"#ffffff\",\r\n    grey: \"#808080\",\r\n    teal: \"#008080\",\r\n    mercury: \"#e6e6e6\",\r\n    green: \"#008000\",\r\n    red: \"#FF3333\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n  weight: {\r\n    medium: 700,\r\n  },\r\n};\r\n"],"sourceRoot":""}